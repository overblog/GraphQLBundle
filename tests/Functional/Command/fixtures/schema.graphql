# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user: User
}

type User {
  # the user name
  name: String
  friends(after: String, first: Int, before: String, last: Int): friendConnection
  friendsForward(after: String, first: Int): userConnection
  friendsBackward(before: String, last: Int): userConnection
}

# A connection to a list of items.
type friendConnection {
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [friendEdge]
}

# An edge in a connection.
type friendEdge {
  friendshipTime: String

  # The item at the end of the edge.
  node: User

  # A cursor for use in pagination.
  cursor: String!
}

# A connection to a list of items.
type userConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [userEdge]
}

# An edge in a connection.
type userEdge {
  # The item at the end of the edge.
  node: User

  # A cursor for use in pagination.
  cursor: String!
}
